{"version":3,"sources":["Home.js","Locked.js","Profile.js","lib/oktaConfig.js","App.js","index.js"],"names":["Home","history","useHistory","restoreOriginalUri","_oktaAuth","originalUri","a","replace","toRelativeUrl","window","location","origin","useOktaAuth","authState","oktaAuth","isAuthenticated","onClick","signOut","signInWithRedirect","Locked","Profile","useState","userInfo","setUserInfo","useEffect","getUser","then","info","href","Object","entries","map","claimEntry","claimName","claimValue","claimId","id","toString","oktaConfig","clientId","process","issuer","redirectUri","scopes","pkce","disableHttpsCheck","OktaAuth","App","path","exact","component","LoginCallback","ReactDOM","render","document","getElementById"],"mappings":"kLAmCeA,EA9BF,WACX,IAAMC,EAAUC,cACVC,EAAkB,uCAAG,WAAOC,EAAWC,GAAlB,SAAAC,EAAA,sDACzBL,EAAQM,QAAQC,wBAAcH,GAAe,IAAKI,OAAOC,SAASC,SADzC,2CAAH,wDAFP,EAKeC,cAAxBC,EALS,EAKTA,UAAWC,EALF,EAKEA,SAOnB,OAAKD,EAEOA,EAAUE,gBASlB,gCACE,uDACA,wBAAQC,QAlBC,WACbb,IACAW,EAASG,QAAQ,CAAEZ,YAAa,OAgB5B,uBATF,gCACE,2DACA,wBAAQW,QAZA,kBAAMF,EAASI,mBAAmB,CAAEb,YAAa,cAYzD,sBALG,6DCdIc,EAJA,WACb,MAAO,8B,QCgGMC,EA5FC,WAAO,IAAD,EACYR,cAAxBC,EADY,EACZA,UAAWC,EADC,EACDA,SADC,EAEYO,mBAAS,MAFrB,mBAEbC,EAFa,KAEHC,EAFG,KAIdtB,EAAUC,cACVC,EAAkB,uCAAG,WAAOC,EAAWC,GAAlB,SAAAC,EAAA,sDACzBL,EAAQM,QAAQC,wBAAcH,GAAe,IAAKI,OAAOC,SAASC,SADzC,2CAAH,wDAmBxB,OAXAa,qBAAU,WACHX,GAAcA,EAAUE,gBAI3BD,EAASW,UAAUC,MAAK,SAACC,GACvBJ,EAAYI,MAHdJ,EAAY,QAMb,CAACV,EAAWC,IAEVQ,EASH,gCACE,gCACE,+GAGE,mBAAGM,KAAK,kEAAR,uBAEK,IALP,yCAQA,kEACmC,iDAAiC,IADpE,kGAKA,kCACE,gCACE,+BACE,uCACA,4CAGJ,gCACGC,OAAOC,QAAQR,GAAUS,KAAI,SAACC,GAC7B,IAAMC,EAAYD,EAAW,GACvBE,EAAaF,EAAW,GACxBG,EAAO,gBAAYF,GACzB,OACE,+BACE,6BAAKA,IACL,oBAAIG,GAAID,EAAR,SAAkBD,EAAWG,eAFtBJ,cA0BnB,wBAAQjB,QA9EG,WACbb,IACAW,EAASG,QAAQ,CAAEZ,YAAa,OA4E9B,uBA7DA,8BACE,4DC5BKiC,EAAa,CACxBC,SAAS,GAAD,OALkBC,wBAM1BC,OAAO,WAAD,OALsBD,wBAKtB,mBACNE,YAAY,oBAAD,OALUF,OAKV,mBACXG,OAAQ,CAAC,SAAU,UAAW,SAC9BC,MAAM,EACNC,mBAAmB,GCAf/B,EAAW,IAAIgC,WAASR,GAoBfS,EAlBH,WACV,IAAM9C,EAAUC,cACVC,EAAkB,uCAAG,WAAOC,EAAWC,GAAlB,SAAAC,EAAA,sDACzBL,EAAQM,QAAQC,wBAAcH,GAAe,IAAKI,OAAOC,SAASC,SADzC,2CAAH,wDAIxB,OACE,cAAC,IAAD,CAAUG,SAAUA,EAAUX,mBAAoBA,EAAlD,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAO6C,KAAK,IAAIC,OAAK,EAACC,UAAWlD,IACjC,cAAC,IAAD,CAAOgD,KAdO,kBAccC,OAAK,EAACC,UAAWC,MAC7C,cAAC,IAAD,CAAaH,KAAK,UAAUC,OAAK,EAACC,UAAW/B,IAC7C,cAAC,IAAD,CAAa6B,KAAK,WAAWE,UAAW9B,U,QCnBhDgC,IAASC,OACP,cAAC,IAAD,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.92d7ea67.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useOktaAuth } from \"@okta/okta-react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { toRelativeUrl } from \"@okta/okta-auth-js\";\r\n\r\nconst Home = () => {\r\n  const history = useHistory();\r\n  const restoreOriginalUri = async (_oktaAuth, originalUri) => {\r\n    history.replace(toRelativeUrl(originalUri || \"/\", window.location.origin));\r\n  };\r\n  const { authState, oktaAuth } = useOktaAuth();\r\n  const login = () => oktaAuth.signInWithRedirect({ originalUri: \"/profile\" });\r\n  const logout = () => {\r\n    restoreOriginalUri();\r\n    oktaAuth.signOut({ originalUri: \"/\" });\r\n  };\r\n\r\n  if (!authState) {\r\n    return <div>Loading authentication...</div>;\r\n  } else if (!authState.isAuthenticated) {\r\n    return (\r\n      <div>\r\n        <h3>You are not authenticated</h3>\r\n        <button onClick={login}>Login</button>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div>\r\n        <h3>You are authenticated</h3>\r\n        <button onClick={logout}>Logout</button>\r\n      </div>\r\n    );\r\n  }\r\n};\r\nexport default Home;\r\n","const Locked = () => {\r\n  return \"YOU MUST BE AUTHENTICATED!\";\r\n};\r\n\r\nexport default Locked;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useOktaAuth } from \"@okta/okta-react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { toRelativeUrl } from \"@okta/okta-auth-js\";\r\n\r\nconst Profile = () => {\r\n  const { authState, oktaAuth } = useOktaAuth();\r\n  const [userInfo, setUserInfo] = useState(null);\r\n\r\n  const history = useHistory();\r\n  const restoreOriginalUri = async (_oktaAuth, originalUri) => {\r\n    history.replace(toRelativeUrl(originalUri || \"/\", window.location.origin));\r\n  };\r\n\r\n  const logout = () => {\r\n    restoreOriginalUri();\r\n    oktaAuth.signOut({ originalUri: \"/\" });\r\n  };\r\n  useEffect(() => {\r\n    if (!authState || !authState.isAuthenticated) {\r\n      // When user isn't authenticated, forget any user info\r\n      setUserInfo(null);\r\n    } else {\r\n      oktaAuth.getUser().then((info) => {\r\n        setUserInfo(info);\r\n      });\r\n    }\r\n  }, [authState, oktaAuth]); // Update if authState changes\r\n\r\n  if (!userInfo) {\r\n    return (\r\n      <div>\r\n        <p>Fetching user profile...</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <p>\r\n          Below is the information from your ID token which was obtained during\r\n          the &nbsp;\r\n          <a href=\"https://developer.okta.com/docs/guides/implement-auth-code-pkce\">\r\n            PKCE Flow\r\n          </a>{\" \"}\r\n          and is now stored in local storage.\r\n        </p>\r\n        <p>\r\n          This route is protected with the <code>&lt;SecureRoute&gt;</code>{\" \"}\r\n          component, which will ensure that this page cannot be accessed until\r\n          you have authenticated.\r\n        </p>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Claim</th>\r\n              <th>Value</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {Object.entries(userInfo).map((claimEntry) => {\r\n              const claimName = claimEntry[0];\r\n              const claimValue = claimEntry[1];\r\n              const claimId = `claim-${claimName}`;\r\n              return (\r\n                <tr key={claimName}>\r\n                  <td>{claimName}</td>\r\n                  <td id={claimId}>{claimValue.toString()}</td>\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n        {/* <button onClick={callBackend}>Call api</button>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Date</th>\r\n              <th>Message</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {messages?.map((message, index) => (\r\n              <tr key={index} id={message.id}>\r\n                <td>{message.date}</td>\r\n                <td>{message.text}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table> */}\r\n      </div>\r\n      <button onClick={logout}>Logout</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","const REACT_APP_CLIENT_ID = process.env.REACT_APP_CLIENT_ID;\r\nconst REACT_APP_OKTA_DOMAIN = process.env.REACT_APP_OKTA_DOMAIN;\r\nconst REACT_APP_PORT = process.env.REACT_APP_PORT;\r\n\r\nexport const oktaConfig = {\r\n  clientId: `${REACT_APP_CLIENT_ID}`,\r\n  issuer: `https://${REACT_APP_OKTA_DOMAIN}/oauth2/default`,\r\n  redirectUri: `http://localhost:${REACT_APP_PORT}/login/callback`, // this makes it so redirects to login if not logged in for secure routes\r\n  scopes: [\"openid\", \"profile\", \"email\"],\r\n  pkce: true,\r\n  disableHttpsCheck: true,\r\n};\r\n","import React from \"react\";\r\nimport { Route, Switch, useHistory } from \"react-router-dom\";\r\nimport { Security, LoginCallback, SecureRoute } from \"@okta/okta-react\";\r\nimport { OktaAuth, toRelativeUrl } from \"@okta/okta-auth-js\";\r\nimport Home from \"./Home\";\r\nimport Locked from \"./Locked\";\r\nimport Profile from \"./Profile\";\r\nimport { oktaConfig } from \"./lib/oktaConfig\";\r\nconst CALLBACK_PATH = \"/login/callback\";\r\n\r\nconst oktaAuth = new OktaAuth(oktaConfig);\r\n\r\nconst App = () => {\r\n  const history = useHistory();\r\n  const restoreOriginalUri = async (_oktaAuth, originalUri) => {\r\n    history.replace(toRelativeUrl(originalUri || \"/\", window.location.origin));\r\n  };\r\n\r\n  return (\r\n    <Security oktaAuth={oktaAuth} restoreOriginalUri={restoreOriginalUri}>\r\n      <Switch>\r\n        <Route path=\"/\" exact component={Home} />\r\n        <Route path={CALLBACK_PATH} exact component={LoginCallback} />\r\n        <SecureRoute path=\"/locked\" exact component={Locked} />\r\n        <SecureRoute path=\"/profile\" component={Profile} />\r\n      </Switch>\r\n    </Security>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\n/* secure route on entire application\r\nconst App = () => { \r\n  return (\r\n    <Router>\r\n      <Security {...config} >\r\n        <Switch>\r\n          <Route path=\"/login/callback\" component={LoginCallback} />\r\n          <SecureRoute path=\"/\" />\r\n        </Switch>\r\n      </Security>\r\n    </Router>\r\n  );\r\n};\r\n*/\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <Router>\r\n    <App />\r\n  </Router>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}